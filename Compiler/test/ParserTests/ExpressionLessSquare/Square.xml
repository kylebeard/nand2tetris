<class>
<keyword> class </keyword>
<classDef> Square </classDef>
<symbol> { </symbol>
<classVarDec>
<keyword> field </keyword>
<keyword> int </keyword>
<field::0::def> x </field::0::def>
<symbol> , </symbol>
<field::1::def> y </field::1::def>
<symbol> ; </symbol>
</classVarDec>
<classVarDec>
<keyword> field </keyword>
<keyword> int </keyword>
<field::2::def> size </field::2::def>
<symbol> ; </symbol>
</classVarDec>
<subroutineDec>
<keyword> constructor </keyword>
<identifier> Square </identifier>
<constructor> new </constructor>
<symbol> ( </symbol>
<parameterList>
<keyword> int </keyword>
<argument::0::def> Ax </argument::0::def>
<symbol> , </symbol>
<keyword> int </keyword>
<argument::1::def> Ay </argument::1::def>
<symbol> , </symbol>
<keyword> int </keyword>
<argument::2::def> Asize </argument::2::def>
</parameterList>
<symbol> ) </symbol>
<subroutineBody>
<symbol> { </symbol>
<statements>
<letStatement>
<keyword> let </keyword>
<field::0::set> x </field::0::set>
<symbol> = </symbol>
<expression>
<term>
<argument::0::accessed> Ax </argument::0::accessed>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
<letStatement>
<keyword> let </keyword>
<field::1::set> y </field::1::set>
<symbol> = </symbol>
<expression>
<term>
<argument::1::accessed> Ay </argument::1::accessed>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
<letStatement>
<keyword> let </keyword>
<field::2::set> size </field::2::set>
<symbol> = </symbol>
<expression>
<term>
<argument::2::accessed> Asize </argument::2::accessed>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
<doStatement>
<keyword> do </keyword>
<identifier> draw </identifier>
<symbol> ( </symbol>
<expressionList>
</expressionList>
<symbol> ) </symbol>
<symbol> ; </symbol>
</doStatement>
<returnStatement>
<keyword> return </keyword>
<expression>
<term>
<field::0::accessed> x </field::0::accessed>
</term>
</expression>
<symbol> ; </symbol>
</returnStatement>
</statements>
<symbol> } </symbol>
</subroutineBody>
</subroutineDec>
<subroutineDec>
<keyword> method </keyword>
<keyword> void </keyword>
<method> dispose </method>
<symbol> ( </symbol>
<parameterList>
<keyword> boolean </keyword>
<argument::0::def> shouldBeArg0 </argument::0::def>
</parameterList>
<symbol> ) </symbol>
<subroutineBody>
<symbol> { </symbol>
<statements>
<doStatement>
<keyword> do </keyword>
<identifier> Memory </identifier>
<symbol> . </symbol>
<subroutineCall> deAlloc </subroutineCall>
<symbol> ( </symbol>
<expressionList>
<expression>
<term>
<keyword> this </keyword>
</term>
</expression>
</expressionList>
<symbol> ) </symbol>
<symbol> ; </symbol>
</doStatement>
<returnStatement>
<keyword> return </keyword>
<symbol> ; </symbol>
</returnStatement>
</statements>
<symbol> } </symbol>
</subroutineBody>
</subroutineDec>
<subroutineDec>
<keyword> method </keyword>
<keyword> void </keyword>
<method> draw </method>
<symbol> ( </symbol>
<parameterList>
</parameterList>
<symbol> ) </symbol>
<subroutineBody>
<symbol> { </symbol>
<statements>
<doStatement>
<keyword> do </keyword>
<identifier> Screen </identifier>
<symbol> . </symbol>
<subroutineCall> setColor </subroutineCall>
<symbol> ( </symbol>
<expressionList>
<expression>
<term>
<field::0::accessed> x </field::0::accessed>
</term>
</expression>
</expressionList>
<symbol> ) </symbol>
<symbol> ; </symbol>
</doStatement>
<doStatement>
<keyword> do </keyword>
<identifier> Screen </identifier>
<symbol> . </symbol>
<subroutineCall> drawRectangle </subroutineCall>
<symbol> ( </symbol>
<expressionList>
<expression>
<term>
<field::0::accessed> x </field::0::accessed>
</term>
</expression>
<symbol> , </symbol>
<expression>
<term>
<field::1::accessed> y </field::1::accessed>
</term>
</expression>
<symbol> , </symbol>
<expression>
<term>
<field::0::accessed> x </field::0::accessed>
</term>
</expression>
<symbol> , </symbol>
<expression>
<term>
<field::1::accessed> y </field::1::accessed>
</term>
</expression>
</expressionList>
<symbol> ) </symbol>
<symbol> ; </symbol>
</doStatement>
<returnStatement>
<keyword> return </keyword>
<symbol> ; </symbol>
</returnStatement>
</statements>
<symbol> } </symbol>
</subroutineBody>
</subroutineDec>
<subroutineDec>
<keyword> method </keyword>
<keyword> void </keyword>
<method> erase </method>
<symbol> ( </symbol>
<parameterList>
</parameterList>
<symbol> ) </symbol>
<subroutineBody>
<symbol> { </symbol>
<statements>
<doStatement>
<keyword> do </keyword>
<identifier> Screen </identifier>
<symbol> . </symbol>
<subroutineCall> setColor </subroutineCall>
<symbol> ( </symbol>
<expressionList>
<expression>
<term>
<field::0::accessed> x </field::0::accessed>
</term>
</expression>
</expressionList>
<symbol> ) </symbol>
<symbol> ; </symbol>
</doStatement>
<doStatement>
<keyword> do </keyword>
<identifier> Screen </identifier>
<symbol> . </symbol>
<subroutineCall> drawRectangle </subroutineCall>
<symbol> ( </symbol>
<expressionList>
<expression>
<term>
<field::0::accessed> x </field::0::accessed>
</term>
</expression>
<symbol> , </symbol>
<expression>
<term>
<field::1::accessed> y </field::1::accessed>
</term>
</expression>
<symbol> , </symbol>
<expression>
<term>
<field::0::accessed> x </field::0::accessed>
</term>
</expression>
<symbol> , </symbol>
<expression>
<term>
<field::1::accessed> y </field::1::accessed>
</term>
</expression>
</expressionList>
<symbol> ) </symbol>
<symbol> ; </symbol>
</doStatement>
<returnStatement>
<keyword> return </keyword>
<symbol> ; </symbol>
</returnStatement>
</statements>
<symbol> } </symbol>
</subroutineBody>
</subroutineDec>
<subroutineDec>
<keyword> method </keyword>
<keyword> void </keyword>
<method> incSize </method>
<symbol> ( </symbol>
<parameterList>
</parameterList>
<symbol> ) </symbol>
<subroutineBody>
<symbol> { </symbol>
<statements>
<ifStatement>
<keyword> if </keyword>
<symbol> ( </symbol>
<expression>
<term>
<field::0::accessed> x </field::0::accessed>
</term>
</expression>
<symbol> ) </symbol>
<symbol> { </symbol>
<statements>
<doStatement>
<keyword> do </keyword>
<identifier> erase </identifier>
<symbol> ( </symbol>
<expressionList>
</expressionList>
<symbol> ) </symbol>
<symbol> ; </symbol>
</doStatement>
<letStatement>
<keyword> let </keyword>
<field::2::set> size </field::2::set>
<symbol> = </symbol>
<expression>
<term>
<field::2::accessed> size </field::2::accessed>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
<doStatement>
<keyword> do </keyword>
<identifier> draw </identifier>
<symbol> ( </symbol>
<expressionList>
</expressionList>
<symbol> ) </symbol>
<symbol> ; </symbol>
</doStatement>
</statements>
<symbol> } </symbol>
</ifStatement>
<returnStatement>
<keyword> return </keyword>
<symbol> ; </symbol>
</returnStatement>
</statements>
<symbol> } </symbol>
</subroutineBody>
</subroutineDec>
<subroutineDec>
<keyword> method </keyword>
<keyword> void </keyword>
<method> decSize </method>
<symbol> ( </symbol>
<parameterList>
</parameterList>
<symbol> ) </symbol>
<subroutineBody>
<symbol> { </symbol>
<statements>
<ifStatement>
<keyword> if </keyword>
<symbol> ( </symbol>
<expression>
<term>
<field::2::accessed> size </field::2::accessed>
</term>
</expression>
<symbol> ) </symbol>
<symbol> { </symbol>
<statements>
<doStatement>
<keyword> do </keyword>
<identifier> erase </identifier>
<symbol> ( </symbol>
<expressionList>
</expressionList>
<symbol> ) </symbol>
<symbol> ; </symbol>
</doStatement>
<letStatement>
<keyword> let </keyword>
<field::2::set> size </field::2::set>
<symbol> = </symbol>
<expression>
<term>
<field::2::accessed> size </field::2::accessed>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
<doStatement>
<keyword> do </keyword>
<identifier> draw </identifier>
<symbol> ( </symbol>
<expressionList>
</expressionList>
<symbol> ) </symbol>
<symbol> ; </symbol>
</doStatement>
</statements>
<symbol> } </symbol>
</ifStatement>
<returnStatement>
<keyword> return </keyword>
<symbol> ; </symbol>
</returnStatement>
</statements>
<symbol> } </symbol>
</subroutineBody>
</subroutineDec>
<subroutineDec>
<keyword> method </keyword>
<keyword> void </keyword>
<method> moveUp </method>
<symbol> ( </symbol>
<parameterList>
</parameterList>
<symbol> ) </symbol>
<subroutineBody>
<symbol> { </symbol>
<statements>
<ifStatement>
<keyword> if </keyword>
<symbol> ( </symbol>
<expression>
<term>
<field::1::accessed> y </field::1::accessed>
</term>
</expression>
<symbol> ) </symbol>
<symbol> { </symbol>
<statements>
<doStatement>
<keyword> do </keyword>
<identifier> Screen </identifier>
<symbol> . </symbol>
<subroutineCall> setColor </subroutineCall>
<symbol> ( </symbol>
<expressionList>
<expression>
<term>
<field::0::accessed> x </field::0::accessed>
</term>
</expression>
</expressionList>
<symbol> ) </symbol>
<symbol> ; </symbol>
</doStatement>
<doStatement>
<keyword> do </keyword>
<identifier> Screen </identifier>
<symbol> . </symbol>
<subroutineCall> drawRectangle </subroutineCall>
<symbol> ( </symbol>
<expressionList>
<expression>
<term>
<field::0::accessed> x </field::0::accessed>
</term>
</expression>
<symbol> , </symbol>
<expression>
<term>
<field::1::accessed> y </field::1::accessed>
</term>
</expression>
<symbol> , </symbol>
<expression>
<term>
<field::0::accessed> x </field::0::accessed>
</term>
</expression>
<symbol> , </symbol>
<expression>
<term>
<field::1::accessed> y </field::1::accessed>
</term>
</expression>
</expressionList>
<symbol> ) </symbol>
<symbol> ; </symbol>
</doStatement>
<letStatement>
<keyword> let </keyword>
<field::1::set> y </field::1::set>
<symbol> = </symbol>
<expression>
<term>
<field::1::accessed> y </field::1::accessed>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
<doStatement>
<keyword> do </keyword>
<identifier> Screen </identifier>
<symbol> . </symbol>
<subroutineCall> setColor </subroutineCall>
<symbol> ( </symbol>
<expressionList>
<expression>
<term>
<field::0::accessed> x </field::0::accessed>
</term>
</expression>
</expressionList>
<symbol> ) </symbol>
<symbol> ; </symbol>
</doStatement>
<doStatement>
<keyword> do </keyword>
<identifier> Screen </identifier>
<symbol> . </symbol>
<subroutineCall> drawRectangle </subroutineCall>
<symbol> ( </symbol>
<expressionList>
<expression>
<term>
<field::0::accessed> x </field::0::accessed>
</term>
</expression>
<symbol> , </symbol>
<expression>
<term>
<field::1::accessed> y </field::1::accessed>
</term>
</expression>
<symbol> , </symbol>
<expression>
<term>
<field::0::accessed> x </field::0::accessed>
</term>
</expression>
<symbol> , </symbol>
<expression>
<term>
<field::1::accessed> y </field::1::accessed>
</term>
</expression>
</expressionList>
<symbol> ) </symbol>
<symbol> ; </symbol>
</doStatement>
</statements>
<symbol> } </symbol>
</ifStatement>
<returnStatement>
<keyword> return </keyword>
<symbol> ; </symbol>
</returnStatement>
</statements>
<symbol> } </symbol>
</subroutineBody>
</subroutineDec>
<subroutineDec>
<keyword> method </keyword>
<keyword> void </keyword>
<method> moveDown </method>
<symbol> ( </symbol>
<parameterList>
</parameterList>
<symbol> ) </symbol>
<subroutineBody>
<symbol> { </symbol>
<statements>
<ifStatement>
<keyword> if </keyword>
<symbol> ( </symbol>
<expression>
<term>
<field::1::accessed> y </field::1::accessed>
</term>
</expression>
<symbol> ) </symbol>
<symbol> { </symbol>
<statements>
<doStatement>
<keyword> do </keyword>
<identifier> Screen </identifier>
<symbol> . </symbol>
<subroutineCall> setColor </subroutineCall>
<symbol> ( </symbol>
<expressionList>
<expression>
<term>
<field::0::accessed> x </field::0::accessed>
</term>
</expression>
</expressionList>
<symbol> ) </symbol>
<symbol> ; </symbol>
</doStatement>
<doStatement>
<keyword> do </keyword>
<identifier> Screen </identifier>
<symbol> . </symbol>
<subroutineCall> drawRectangle </subroutineCall>
<symbol> ( </symbol>
<expressionList>
<expression>
<term>
<field::0::accessed> x </field::0::accessed>
</term>
</expression>
<symbol> , </symbol>
<expression>
<term>
<field::1::accessed> y </field::1::accessed>
</term>
</expression>
<symbol> , </symbol>
<expression>
<term>
<field::0::accessed> x </field::0::accessed>
</term>
</expression>
<symbol> , </symbol>
<expression>
<term>
<field::1::accessed> y </field::1::accessed>
</term>
</expression>
</expressionList>
<symbol> ) </symbol>
<symbol> ; </symbol>
</doStatement>
<letStatement>
<keyword> let </keyword>
<field::1::set> y </field::1::set>
<symbol> = </symbol>
<expression>
<term>
<field::1::accessed> y </field::1::accessed>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
<doStatement>
<keyword> do </keyword>
<identifier> Screen </identifier>
<symbol> . </symbol>
<subroutineCall> setColor </subroutineCall>
<symbol> ( </symbol>
<expressionList>
<expression>
<term>
<field::0::accessed> x </field::0::accessed>
</term>
</expression>
</expressionList>
<symbol> ) </symbol>
<symbol> ; </symbol>
</doStatement>
<doStatement>
<keyword> do </keyword>
<identifier> Screen </identifier>
<symbol> . </symbol>
<subroutineCall> drawRectangle </subroutineCall>
<symbol> ( </symbol>
<expressionList>
<expression>
<term>
<field::0::accessed> x </field::0::accessed>
</term>
</expression>
<symbol> , </symbol>
<expression>
<term>
<field::1::accessed> y </field::1::accessed>
</term>
</expression>
<symbol> , </symbol>
<expression>
<term>
<field::0::accessed> x </field::0::accessed>
</term>
</expression>
<symbol> , </symbol>
<expression>
<term>
<field::1::accessed> y </field::1::accessed>
</term>
</expression>
</expressionList>
<symbol> ) </symbol>
<symbol> ; </symbol>
</doStatement>
</statements>
<symbol> } </symbol>
</ifStatement>
<returnStatement>
<keyword> return </keyword>
<symbol> ; </symbol>
</returnStatement>
</statements>
<symbol> } </symbol>
</subroutineBody>
</subroutineDec>
<subroutineDec>
<keyword> method </keyword>
<keyword> void </keyword>
<method> moveLeft </method>
<symbol> ( </symbol>
<parameterList>
</parameterList>
<symbol> ) </symbol>
<subroutineBody>
<symbol> { </symbol>
<statements>
<ifStatement>
<keyword> if </keyword>
<symbol> ( </symbol>
<expression>
<term>
<field::0::accessed> x </field::0::accessed>
</term>
</expression>
<symbol> ) </symbol>
<symbol> { </symbol>
<statements>
<doStatement>
<keyword> do </keyword>
<identifier> Screen </identifier>
<symbol> . </symbol>
<subroutineCall> setColor </subroutineCall>
<symbol> ( </symbol>
<expressionList>
<expression>
<term>
<field::0::accessed> x </field::0::accessed>
</term>
</expression>
</expressionList>
<symbol> ) </symbol>
<symbol> ; </symbol>
</doStatement>
<doStatement>
<keyword> do </keyword>
<identifier> Screen </identifier>
<symbol> . </symbol>
<subroutineCall> drawRectangle </subroutineCall>
<symbol> ( </symbol>
<expressionList>
<expression>
<term>
<field::0::accessed> x </field::0::accessed>
</term>
</expression>
<symbol> , </symbol>
<expression>
<term>
<field::1::accessed> y </field::1::accessed>
</term>
</expression>
<symbol> , </symbol>
<expression>
<term>
<field::0::accessed> x </field::0::accessed>
</term>
</expression>
<symbol> , </symbol>
<expression>
<term>
<field::1::accessed> y </field::1::accessed>
</term>
</expression>
</expressionList>
<symbol> ) </symbol>
<symbol> ; </symbol>
</doStatement>
<letStatement>
<keyword> let </keyword>
<field::0::set> x </field::0::set>
<symbol> = </symbol>
<expression>
<term>
<field::0::accessed> x </field::0::accessed>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
<doStatement>
<keyword> do </keyword>
<identifier> Screen </identifier>
<symbol> . </symbol>
<subroutineCall> setColor </subroutineCall>
<symbol> ( </symbol>
<expressionList>
<expression>
<term>
<field::0::accessed> x </field::0::accessed>
</term>
</expression>
</expressionList>
<symbol> ) </symbol>
<symbol> ; </symbol>
</doStatement>
<doStatement>
<keyword> do </keyword>
<identifier> Screen </identifier>
<symbol> . </symbol>
<subroutineCall> drawRectangle </subroutineCall>
<symbol> ( </symbol>
<expressionList>
<expression>
<term>
<field::0::accessed> x </field::0::accessed>
</term>
</expression>
<symbol> , </symbol>
<expression>
<term>
<field::1::accessed> y </field::1::accessed>
</term>
</expression>
<symbol> , </symbol>
<expression>
<term>
<field::0::accessed> x </field::0::accessed>
</term>
</expression>
<symbol> , </symbol>
<expression>
<term>
<field::1::accessed> y </field::1::accessed>
</term>
</expression>
</expressionList>
<symbol> ) </symbol>
<symbol> ; </symbol>
</doStatement>
</statements>
<symbol> } </symbol>
</ifStatement>
<returnStatement>
<keyword> return </keyword>
<symbol> ; </symbol>
</returnStatement>
</statements>
<symbol> } </symbol>
</subroutineBody>
</subroutineDec>
<subroutineDec>
<keyword> method </keyword>
<keyword> void </keyword>
<method> moveRight </method>
<symbol> ( </symbol>
<parameterList>
</parameterList>
<symbol> ) </symbol>
<subroutineBody>
<symbol> { </symbol>
<statements>
<ifStatement>
<keyword> if </keyword>
<symbol> ( </symbol>
<expression>
<term>
<field::0::accessed> x </field::0::accessed>
</term>
</expression>
<symbol> ) </symbol>
<symbol> { </symbol>
<statements>
<doStatement>
<keyword> do </keyword>
<identifier> Screen </identifier>
<symbol> . </symbol>
<subroutineCall> setColor </subroutineCall>
<symbol> ( </symbol>
<expressionList>
<expression>
<term>
<field::0::accessed> x </field::0::accessed>
</term>
</expression>
</expressionList>
<symbol> ) </symbol>
<symbol> ; </symbol>
</doStatement>
<doStatement>
<keyword> do </keyword>
<identifier> Screen </identifier>
<symbol> . </symbol>
<subroutineCall> drawRectangle </subroutineCall>
<symbol> ( </symbol>
<expressionList>
<expression>
<term>
<field::0::accessed> x </field::0::accessed>
</term>
</expression>
<symbol> , </symbol>
<expression>
<term>
<field::1::accessed> y </field::1::accessed>
</term>
</expression>
<symbol> , </symbol>
<expression>
<term>
<field::0::accessed> x </field::0::accessed>
</term>
</expression>
<symbol> , </symbol>
<expression>
<term>
<field::1::accessed> y </field::1::accessed>
</term>
</expression>
</expressionList>
<symbol> ) </symbol>
<symbol> ; </symbol>
</doStatement>
<letStatement>
<keyword> let </keyword>
<field::0::set> x </field::0::set>
<symbol> = </symbol>
<expression>
<term>
<field::0::accessed> x </field::0::accessed>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
<doStatement>
<keyword> do </keyword>
<identifier> Screen </identifier>
<symbol> . </symbol>
<subroutineCall> setColor </subroutineCall>
<symbol> ( </symbol>
<expressionList>
<expression>
<term>
<field::0::accessed> x </field::0::accessed>
</term>
</expression>
</expressionList>
<symbol> ) </symbol>
<symbol> ; </symbol>
</doStatement>
<doStatement>
<keyword> do </keyword>
<identifier> Screen </identifier>
<symbol> . </symbol>
<subroutineCall> drawRectangle </subroutineCall>
<symbol> ( </symbol>
<expressionList>
<expression>
<term>
<field::0::accessed> x </field::0::accessed>
</term>
</expression>
<symbol> , </symbol>
<expression>
<term>
<field::1::accessed> y </field::1::accessed>
</term>
</expression>
<symbol> , </symbol>
<expression>
<term>
<field::0::accessed> x </field::0::accessed>
</term>
</expression>
<symbol> , </symbol>
<expression>
<term>
<field::1::accessed> y </field::1::accessed>
</term>
</expression>
</expressionList>
<symbol> ) </symbol>
<symbol> ; </symbol>
</doStatement>
</statements>
<symbol> } </symbol>
</ifStatement>
<returnStatement>
<keyword> return </keyword>
<symbol> ; </symbol>
</returnStatement>
</statements>
<symbol> } </symbol>
</subroutineBody>
</subroutineDec>
<symbol> } </symbol>
</class>
