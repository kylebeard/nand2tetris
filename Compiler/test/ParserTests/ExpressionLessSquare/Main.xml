<class>
<keyword> class </keyword>
<classDef> Main </classDef>
<symbol> { </symbol>
<classVarDec>
<keyword> static </keyword>
<keyword> boolean </keyword>
<static::0::def> test </static::0::def>
<symbol> ; </symbol>
</classVarDec>
<subroutineDec>
<keyword> function </keyword>
<keyword> void </keyword>
<function> main </function>
<symbol> ( </symbol>
<parameterList>
</parameterList>
<symbol> ) </symbol>
<subroutineBody>
<symbol> { </symbol>
<varDec>
<keyword> var </keyword>
<identifier> SquareGame </identifier>
<var::0::def> game </var::0::def>
<symbol> ; </symbol>
</varDec>
<statements>
<letStatement>
<keyword> let </keyword>
<var::0::set> game </var::0::set>
<symbol> = </symbol>
<expression>
<term>
<var::0::accessed> game </var::0::accessed>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
<doStatement>
<keyword> do </keyword>
<identifier> game </identifier>
<symbol> . </symbol>
<subroutineCall> run </subroutineCall>
<symbol> ( </symbol>
<expressionList>
</expressionList>
<symbol> ) </symbol>
<symbol> ; </symbol>
</doStatement>
<doStatement>
<keyword> do </keyword>
<identifier> game </identifier>
<symbol> . </symbol>
<subroutineCall> dispose </subroutineCall>
<symbol> ( </symbol>
<expressionList>
</expressionList>
<symbol> ) </symbol>
<symbol> ; </symbol>
</doStatement>
<returnStatement>
<keyword> return </keyword>
<symbol> ; </symbol>
</returnStatement>
</statements>
<symbol> } </symbol>
</subroutineBody>
</subroutineDec>
<subroutineDec>
<keyword> function </keyword>
<keyword> void </keyword>
<function> test </function>
<symbol> ( </symbol>
<parameterList>
</parameterList>
<symbol> ) </symbol>
<subroutineBody>
<symbol> { </symbol>
<varDec>
<keyword> var </keyword>
<keyword> int </keyword>
<var::0::def> i </var::0::def>
<symbol> , </symbol>
<var::1::def> j </var::1::def>
<symbol> ; </symbol>
</varDec>
<varDec>
<keyword> var </keyword>
<identifier> String </identifier>
<var::2::def> s </var::2::def>
<symbol> ; </symbol>
</varDec>
<varDec>
<keyword> var </keyword>
<identifier> Array </identifier>
<var::3::def> a </var::3::def>
<symbol> ; </symbol>
</varDec>
<statements>
<ifStatement>
<keyword> if </keyword>
<symbol> ( </symbol>
<expression>
<term>
<var::0::accessed> i </var::0::accessed>
</term>
</expression>
<symbol> ) </symbol>
<symbol> { </symbol>
<statements>
<letStatement>
<keyword> let </keyword>
<var::2::set> s </var::2::set>
<symbol> = </symbol>
<expression>
<term>
<var::0::accessed> i </var::0::accessed>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
<letStatement>
<keyword> let </keyword>
<var::2::set> s </var::2::set>
<symbol> = </symbol>
<expression>
<term>
<var::1::accessed> j </var::1::accessed>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
<letStatement>
<keyword> let </keyword>
<var::3::set> a </var::3::set>
<symbol> [ </symbol>
<expression>
<term>
<var::0::accessed> i </var::0::accessed>
</term>
</expression>
<symbol> ] </symbol>
<symbol> = </symbol>
<expression>
<term>
<var::1::accessed> j </var::1::accessed>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
</statements>
<symbol> } </symbol>
<keyword> else </keyword>
<symbol> { </symbol>
<statements>
<letStatement>
<keyword> let </keyword>
<var::0::set> i </var::0::set>
<symbol> = </symbol>
<expression>
<term>
<var::0::accessed> i </var::0::accessed>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
<letStatement>
<keyword> let </keyword>
<var::1::set> j </var::1::set>
<symbol> = </symbol>
<expression>
<term>
<var::1::accessed> j </var::1::accessed>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
<letStatement>
<keyword> let </keyword>
<var::0::set> i </var::0::set>
<symbol> = </symbol>
<expression>
<term>
<var::0::accessed> i </var::0::accessed>
</term>
<symbol> | </symbol>
<term>
<var::1::accessed> j </var::1::accessed>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
</statements>
<symbol> } </symbol>
</ifStatement>
<returnStatement>
<keyword> return </keyword>
<symbol> ; </symbol>
</returnStatement>
</statements>
<symbol> } </symbol>
</subroutineBody>
</subroutineDec>
<symbol> } </symbol>
</class>
