<test>
    <ifStatement>
        <keyword> if </keyword>
        <symbol> ( </symbol>
        <expression>
            <integerConstant> 1 </integerConstant>
        </expression>
        <symbol> ) </symbol>
        <symbol> { </symbol>
        <statements>
            <letStatement>
                <keyword> let </keyword>
                <identifier> x </identifier>
                <symbol> = </symbol>
                <expression>
                    <integerConstant> 1 </integerConstant>
                </expression>
                <symbol> ; </symbol>
            </letStatement>
            <ifStatement>
                <keyword> if </keyword>
                <symbol> ( </symbol>
                <expression>
                    <integerConstant> 1 </integerConstant>
                </expression>
                <symbol> ) </symbol>
                <symbol> { </symbol>
                <statements></statements>
                <symbol> } </symbol>
            </ifStatement>
        </statements>
        <symbol> } </symbol>
        <keyword> else </keyword>
        <symbol> { </symbol>
        <statements>
            <letStatement>
                <keyword> let </keyword>
                <identifier> z </identifier>
                <symbol> = </symbol>
                <expression>
                    <integerConstant> 1 </integerConstant>
                </expression>
                <symbol> ; </symbol>
            </letStatement>
            <ifStatement>
                <keyword> if </keyword>
                <symbol> ( </symbol>
                <expression>
                    <integerConstant> 0 </integerConstant>
                </expression>
                <symbol> ) </symbol>
                <symbol> { </symbol>
                <statements>
                    <letStatement>
                        <keyword> let </keyword>
                        <identifier> a </identifier>
                        <symbol> = </symbol>
                        <expression>
                            <integerConstant> 1 </integerConstant>
                        </expression>
                        <symbol> ; </symbol>
                    </letStatement>
                </statements>
                <symbol> } </symbol>
                <keyword> else </keyword>
                <symbol> { </symbol>
                <statements>
                    <letStatement>
                        <keyword> let </keyword>
                        <identifier> b </identifier>
                        <symbol> = </symbol>
                        <expression>
                            <integerConstant> 2 </integerConstant>
                        </expression>
                        <symbol> ; </symbol>
                    </letStatement>
                </statements>
                <symbol> } </symbol>
            </ifStatement>
        </statements>
        <symbol> } </symbol>
    </ifStatement>
    <letStatement>
        <keyword> let </keyword>
        <identifier> x </identifier>
        <symbol> = </symbol>
        <expression>
            <integerConstant> 1 </integerConstant>
        </expression>
        <symbol> ; </symbol>
    </letStatement>
    <letStatement>
        <keyword> let </keyword>
        <identifier> z </identifier>
        <symbol> [ </symbol>
        <expression>
            <integerConstant> 1 </integerConstant>
        </expression>
        <symbol> ] </symbol>
        <symbol> = </symbol>
        <expression>
            <integerConstant> 2 </integerConstant>
        </expression>
        <symbol> ; </symbol>
    </letStatement>
    <subroutineDec>
        <keyword> function </keyword>
        <keyword> void </keyword>
        <identifier> myFunc </identifier>
        <symbol> ( </symbol>
        <parameterList>
            <keyword> int </keyword>
            <identifier> a </identifier>
            <symbol> , </symbol>
            <keyword> int </keyword>
            <identifier> b </identifier>
        </parameterList>
        <symbol> ) </symbol>
        <subroutineBody>
            <symbol> { </symbol>
            <varDec>
                <keyword> var </keyword>
                <keyword> int </keyword>
                <identifier> x </identifier>
                <symbol> ; </symbol>
            </varDec>
            <varDec>
                <keyword> var </keyword>
                <identifier> Square </identifier>
                <identifier> square </identifier>
                <symbol> ; </symbol>
            </varDec>
            <varDec>
                <keyword> var </keyword>
                <keyword> boolean </keyword>
                <identifier> a </identifier>
                <symbol> , </symbol>
                <identifier> b </identifier>
                <symbol> , </symbol>
                <identifier> c </identifier>
                <symbol> , </symbol>
                <identifier> d </identifier>
                <symbol> ; </symbol>
            </varDec>
            <statements></statements>
            <symbol> } </symbol>
        </subroutineBody>
    </subroutineDec>
    <classVarDec>
        <keyword> static </keyword>
        <keyword> int </keyword>
        <identifier> x </identifier>
        <symbol> , </symbol>
        <identifier> y </identifier>
        <symbol> ; </symbol>
    </classVarDec>
    <varDec>
        <keyword> var </keyword>
        <keyword> char </keyword>
        <identifier> a </identifier>
        <symbol> , </symbol>
        <identifier> b </identifier>
        <symbol> , </symbol>
        <identifier> c </identifier>
        <symbol> , </symbol>
        <identifier> d </identifier>
        <symbol> , </symbol>
        <identifier> e </identifier>
        <symbol> , </symbol>
        <identifier> f </identifier>
        <symbol> ; </symbol>
    </varDec>
</test>