<class>
    <classVarDec>
        <keyword> static </keyword>
        <keyword> int </keyword>
        <identifier> x </identifier>
        <symbol> ; </symbol>
    </classVarDec>
    <classVarDec>
        <keyword> field </keyword>
        <keyword> char </keyword>
        <identifier> y </identifier>
        <symbol> ; </symbol>
    </classVarDec>
    <classVarDec>
        <keyword> static </keyword>
        <keyword> boolean </keyword>
        <identifier> x </identifier>
        <symbol> , </symbol>
        <identifier> y </identifier>
        <symbol> , </symbol>
        <identifier> z </identifier>
        <symbol> , </symbol>
        <identifier> a </identifier>
        <symbol> , </symbol>
        <identifier> b </identifier>
        <symbol> , </symbol>
        <identifier> c </identifier>
        <symbol> ; </symbol>
    </classVarDec>
    <classVarDec>
        <keyword> field </keyword>
        <identifier> Point </identifier>
        <identifier> p1 </identifier>
        <symbol> , </symbol>
        <identifier> p2 </identifier>
        <symbol> ; </symbol>
    </classVarDec>
    <subroutineDec>
        <keyword> method </keyword>
        <keyword> void </keyword>
        <identifier> x </identifier>
        <symbol> ( </symbol>
        <parameterList>
            <keyword> int </keyword>
            <identifier> y </identifier>
        </parameterList>
        <symbol> ) </symbol>
        <subroutineBody>
            <symbol> { </symbol>
            <varDec>
                <keyword> var </keyword>
                <keyword> int </keyword>
                <identifier> j </identifier>
                <symbol> ; </symbol>
            </varDec>
            <statements>
                <letStatement>
                    <keyword> let </keyword>
                    <identifier> x </identifier>
                    <symbol> = </symbol>
                    <expression>
                        <integerConstant> 1 </integerConstant>
                    </expression>
                    <symbol> ; </symbol>
                </letStatement>
                <letStatement>
                    <keyword> let </keyword>
                    <identifier> hey </identifier>
                    <symbol> = </symbol>
                    <expression>
                        <integerConstant> 1 </integerConstant>
                    </expression>
                    <symbol> ; </symbol>
                </letStatement>
                <letStatement>
                    <keyword> let </keyword>
                    <identifier> what </identifier>
                    <symbol> [ </symbol>
                    <expression>
                        <integerConstant> 1 </integerConstant>
                    </expression>
                    <symbol> ] </symbol>
                    <symbol> = </symbol>
                    <expression>
                        <integerConstant> 1 </integerConstant>
                    </expression>
                    <symbol> ; </symbol>
                </letStatement>
                <ifStatement>
                    <keyword> if </keyword>
                    <symbol> ( </symbol>
                    <expression>
                        <integerConstant> 1 </integerConstant>
                    </expression>
                    <symbol> ) </symbol>
                    <symbol> { </symbol>
                    <statements>
                        <letStatement>
                            <keyword> let </keyword>
                            <identifier> x </identifier>
                            <symbol> = </symbol>
                            <expression>
                                <integerConstant> 1 </integerConstant>
                            </expression>
                            <symbol> ; </symbol>
                        </letStatement>
                    </statements>
                    <symbol> } </symbol>
                    <keyword> else </keyword>
                    <symbol> { </symbol>
                    <statements>
                        <letStatement>
                            <keyword> let </keyword>
                            <identifier> x </identifier>
                            <symbol> = </symbol>
                            <expression>
                                <integerConstant> 1 </integerConstant>
                            </expression>
                            <symbol> ; </symbol>
                        </letStatement>
                    </statements>
                    <symbol> } </symbol>
                </ifStatement>
            </statements>
            <symbol> } </symbol>
        </subroutineBody>
    </subroutineDec>
    <subroutineDec>
        <keyword> function </keyword>
        <keyword> char </keyword>
        <identifier> hi </identifier>
        <symbol> ( </symbol>
        <parameterList>
            <keyword> char </keyword>
            <identifier> x </identifier>
        </parameterList>
        <symbol> ) </symbol>
        <subroutineBody>
            <symbol> { </symbol>
            <varDec>
                <keyword> var </keyword>
                <keyword> boolean </keyword>
                <identifier> k </identifier>
                <symbol> , </symbol>
                <identifier> l </identifier>
                <symbol> ; </symbol>
            </varDec>
            <statements></statements>
            <symbol> } </symbol>
        </subroutineBody>
    </subroutineDec>
    <subroutineDec>
        <keyword> constructor </keyword>
        <keyword> int </keyword>
        <identifier> y </identifier>
        <symbol> ( </symbol>
        <parameterList>
            <keyword> boolean </keyword>
            <identifier> z </identifier>
        </parameterList>
        <symbol> ) </symbol>
        <subroutineBody>
            <symbol> { </symbol>
            <varDec>
                <keyword> var </keyword>
                <keyword> char </keyword>
                <identifier> x </identifier>
                <symbol> ; </symbol>
            </varDec>
            <statements></statements>
            <symbol> } </symbol>
        </subroutineBody>
    </subroutineDec>
    <subroutineDec>
        <keyword> method </keyword>
        <identifier> AClass </identifier>
        <identifier> z </identifier>
        <symbol> ( </symbol>
        <parameterList>
            <identifier> Point </identifier>
            <identifier> p1 </identifier>
            <symbol> , </symbol>
            <identifier> Point </identifier>
            <identifier> p2 </identifier>
        </parameterList>
        <symbol> ) </symbol>
        <subroutineBody>
            <symbol> { </symbol>
            <varDec>
                <keyword> var </keyword>
                <identifier> AClass </identifier>
                <identifier> a </identifier>
                <symbol> ; </symbol>
            </varDec>
            <varDec>
                <keyword> var </keyword>
                <keyword> int </keyword>
                <identifier> x </identifier>
                <symbol> , </symbol>
                <identifier> y </identifier>
                <symbol> ; </symbol>
            </varDec>
            <varDec>
                <keyword> var </keyword>
                <keyword> boolean </keyword>
                <identifier> g </identifier>
                <symbol> ; </symbol>
            </varDec>
            <statements></statements>
            <symbol> } </symbol>
        </subroutineBody>
    </subroutineDec>
    <subroutineDec>
        <keyword> function </keyword>
        <keyword> boolean </keyword>
        <identifier> b </identifier>
        <symbol> ( </symbol>
        <parameterList>
            <keyword> int </keyword>
            <identifier> x </identifier>
            <symbol> , </symbol>
            <keyword> int </keyword>
            <identifier> y </identifier>
            <symbol> , </symbol>
            <keyword> int </keyword>
            <identifier> z </identifier>
            <symbol> , </symbol>
            <keyword> char </keyword>
            <identifier> a </identifier>
            <symbol> , </symbol>
            <keyword> boolean </keyword>
            <identifier> b </identifier>
            <symbol> , </symbol>
            <identifier> SomeClass </identifier>
            <identifier> sc </identifier>
        </parameterList>
        <symbol> ) </symbol>
        <subroutineBody>
            <symbol> { </symbol>
            <varDec>
                <keyword> var </keyword>
                <keyword> int </keyword>
                <identifier> x </identifier>
                <symbol> , </symbol>
                <identifier> y </identifier>
                <symbol> , </symbol>
                <identifier> z </identifier>
                <symbol> ; </symbol>
            </varDec>
            <varDec>
                <keyword> var </keyword>
                <keyword> boolean </keyword>
                <identifier> q </identifier>
                <symbol> ; </symbol>
            </varDec>
            <varDec>
                <keyword> var </keyword>
                <identifier> Hi </identifier>
                <identifier> hey </identifier>
                <symbol> , </symbol>
                <identifier> hello </identifier>
                <symbol> , </symbol>
                <identifier> heyThere </identifier>
                <symbol> ; </symbol>
            </varDec>
            <varDec>
                <keyword> var </keyword>
                <keyword> int </keyword>
                <identifier> s </identifier>
                <symbol> ; </symbol>
            </varDec>
            <varDec>
                <keyword> var </keyword>
                <keyword> int </keyword>
                <identifier> e </identifier>
                <symbol> ; </symbol>
            </varDec>
            <varDec>
                <keyword> var </keyword>
                <keyword> int </keyword>
                <identifier> r </identifier>
                <symbol> ; </symbol>
            </varDec>
            <varDec>
                <keyword> var </keyword>
                <keyword> char </keyword>
                <identifier> u </identifier>
                <symbol> ; </symbol>
            </varDec>
            <statements></statements>
            <symbol> } </symbol>
        </subroutineBody>
    </subroutineDec>
</class>