<class>
    <keyword> class </keyword>
    <className> Main </className>
    <symbol> { </symbol>
    <classVarDec>
        <keyword> static </keyword>
        <keyword> boolean </keyword>
        <define::static::boolean::0> test </define::static::boolean::0>
        <symbol> ; </symbol>
    </classVarDec>
    <subroutineDec>
        <keyword> function </keyword>
        <keyword> void </keyword>
        <define::function> main </define::function>
        <symbol> ( </symbol>
        <parameterList></parameterList>
        <symbol> ) </symbol>
        <subroutineBody>
            <symbol> { </symbol>
            <varDec>
                <keyword> var </keyword>
                <identifier> SquareGame </identifier>
                <define::var::0> game </define::var::0>
                <symbol> ; </symbol>
            </varDec>
            <statements>
                <letStatement>
                    <keyword> let </keyword>
                    <access::var::0> game </access::var::0>
                    <symbol> = </symbol>
                    <expression>
                        <term>
                            <identifier> SquareGame </identifier>
                            <symbol> . </symbol>
                            <identifier> new </identifier>
                            <symbol> ( </symbol>
                            <expressionList></expressionList>
                            <symbol> ) </symbol>
                        </term>
                    </expression>
                    <symbol> ; </symbol>
                </letStatement>
                <doStatement>
                    <keyword> do </keyword>
                    <identifier> game </identifier>
                    <symbol> . </symbol>
                    <identifier> run </identifier>
                    <symbol> ( </symbol>
                    <expressionList></expressionList>
                    <symbol> ) </symbol>
                    <symbol> ; </symbol>
                </doStatement>
                <doStatement>
                    <keyword> do </keyword>
                    <identifier> game </identifier>
                    <symbol> . </symbol>
                    <identifier> dispose </identifier>
                    <symbol> ( </symbol>
                    <expressionList></expressionList>
                    <symbol> ) </symbol>
                    <symbol> ; </symbol>
                </doStatement>
                <returnStatement>
                    <keyword> return </keyword>
                    <symbol> ; </symbol>
                </returnStatement>
            </statements>
            <symbol> } </symbol>
        </subroutineBody>
    </subroutineDec>
    <subroutineDec>
        <keyword> function </keyword>
        <keyword> void </keyword>
        <define::function> test </define::function>
        <symbol> ( </symbol>
        <parameterList></parameterList>
        <symbol> ) </symbol>
        <subroutineBody>
            <symbol> { </symbol>
            <varDec>
                <keyword> var </keyword>
                <keyword> int </keyword>
                <define::var::1> i </define::var::1>
                <symbol> , </symbol>
                <define::var::2> j </define::var::2>
                <symbol> ; </symbol>
            </varDec>
            <varDec>
                <keyword> var </keyword>
                <identifier> String </identifier>
                <define::var::3> s </define::var::3>
                <symbol> ; </symbol>
            </varDec>
            <varDec>
                <keyword> var </keyword>
                <identifier> Array </identifier>
                <define::var::4> a </define::var::4>
                <symbol> ; </symbol>
            </varDec>
            <statements>
                <ifStatement>
                    <keyword> if </keyword>
                    <symbol> ( </symbol>
                    <expression>
                        <term>
                            <keyword> false </keyword>
                        </term>
                    </expression>
                    <symbol> ) </symbol>
                    <symbol> { </symbol>
                    <statements>
                        <letStatement>
                            <keyword> let </keyword>
                            <access::var::3> s </access::var::3>
                            <symbol> = </symbol>
                            <expression>
                                <term>
                                    <stringConstant> string constant </stringConstant>
                                </term>
                            </expression>
                            <symbol> ; </symbol>
                        </letStatement>
                        <letStatement>
                            <keyword> let </keyword>
                            <access::var::3> s </access::var::3>
                            <symbol> = </symbol>
                            <expression>
                                <term>
                                    <keyword> null </keyword>
                                </term>
                            </expression>
                            <symbol> ; </symbol>
                        </letStatement>
                        <letStatement>
                            <keyword> let </keyword>
                            <access::var::4> a </access::var::4>
                            <symbol> [ </symbol>
                            <expression>
                                <term>
                                    <integerConstant> 1 </integerConstant>
                                </term>
                            </expression>
                            <symbol> ] </symbol>
                            <symbol> = </symbol>
                            <expression>
                                <term>
                                    <access::var4> a </access::var4>
                                    <symbol> [ </symbol>
                                    <expression>
                                        <term>
                                            <integerConstant> 2 </integerConstant>
                                        </term>
                                    </expression>
                                    <symbol> ] </symbol>
                                </term>
                            </expression>
                            <symbol> ; </symbol>
                        </letStatement>
                    </statements>
                    <symbol> } </symbol>
                    <keyword> else </keyword>
                    <symbol> { </symbol>
                    <statements>
                        <letStatement>
                            <keyword> let </keyword>
                            <access::var::1> i </access::var::1>
                            <symbol> = </symbol>
                            <expression>
                                <term>
                                    <access::var1> i </access::var1>
                                </term>
                                <symbol> * </symbol>
                                <term>
                                    <symbol> ( </symbol>
                                    <expression>
                                        <term>
                                            <symbol> - </symbol>
                                            <term>
                                                <access::var2> j </access::var2>
                                            </term>
                                        </term>
                                    </expression>
                                    <symbol> ) </symbol>
                                </term>
                            </expression>
                            <symbol> ; </symbol>
                        </letStatement>
                        <letStatement>
                            <keyword> let </keyword>
                            <access::var::2> j </access::var::2>
                            <symbol> = </symbol>
                            <expression>
                                <term>
                                    <access::var2> j </access::var2>
                                </term>
                                <symbol> / </symbol>
                                <term>
                                    <symbol> ( </symbol>
                                    <expression>
                                        <term>
                                            <symbol> - </symbol>
                                            <term>
                                                <integerConstant> 2 </integerConstant>
                                            </term>
                                        </term>
                                    </expression>
                                    <symbol> ) </symbol>
                                </term>
                            </expression>
                            <symbol> ; </symbol>
                        </letStatement>
                        <letStatement>
                            <keyword> let </keyword>
                            <access::var::1> i </access::var::1>
                            <symbol> = </symbol>
                            <expression>
                                <term>
                                    <access::var1> i </access::var1>
                                </term>
                                <symbol> | </symbol>
                                <term>
                                    <access::var2> j </access::var2>
                                </term>
                            </expression>
                            <symbol> ; </symbol>
                        </letStatement>
                    </statements>
                    <symbol> } </symbol>
                </ifStatement>
                <returnStatement>
                    <keyword> return </keyword>
                    <symbol> ; </symbol>
                </returnStatement>
            </statements>
            <symbol> } </symbol>
        </subroutineBody>
    </subroutineDec>
    <symbol> } </symbol>
</class>