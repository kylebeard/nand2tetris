<class>
    <keyword> class </keyword>
    <className> Main </className>
    <symbol> { </symbol>
    <subroutineDec>
        <keyword> function </keyword>
        <keyword> void </keyword>
        <define::function> main </define::function>
        <symbol> ( </symbol>
        <parameterList></parameterList>
        <symbol> ) </symbol>
        <subroutineBody>
            <symbol> { </symbol>
            <varDec>
                <keyword> var </keyword>
                <identifier> Array </identifier>
                <define::var::0> a </define::var::0>
                <symbol> ; </symbol>
            </varDec>
            <varDec>
                <keyword> var </keyword>
                <keyword> int </keyword>
                <define::var::1> length </define::var::1>
                <symbol> ; </symbol>
            </varDec>
            <varDec>
                <keyword> var </keyword>
                <keyword> int </keyword>
                <define::var::2> i </define::var::2>
                <symbol> , </symbol>
                <define::var::3> sum </define::var::3>
                <symbol> ; </symbol>
            </varDec>
            <statements>
                <letStatement>
                    <keyword> let </keyword>
                    <access::var::1> length </access::var::1>
                    <symbol> = </symbol>
                    <expression>
                        <term>
                            <identifier> Keyboard </identifier>
                            <symbol> . </symbol>
                            <identifier> readInt </identifier>
                            <symbol> ( </symbol>
                            <expressionList>
                                <expression>
                                    <term>
                                        <stringConstant> HOW MANY NUMBERS?  </stringConstant>
                                    </term>
                                </expression>
                            </expressionList>
                            <symbol> ) </symbol>
                        </term>
                    </expression>
                    <symbol> ; </symbol>
                </letStatement>
                <letStatement>
                    <keyword> let </keyword>
                    <access::var::0> a </access::var::0>
                    <symbol> = </symbol>
                    <expression>
                        <term>
                            <identifier> Array </identifier>
                            <symbol> . </symbol>
                            <identifier> new </identifier>
                            <symbol> ( </symbol>
                            <expressionList>
                                <expression>
                                    <term>
                                        <access::var1> length </access::var1>
                                    </term>
                                </expression>
                            </expressionList>
                            <symbol> ) </symbol>
                        </term>
                    </expression>
                    <symbol> ; </symbol>
                </letStatement>
                <letStatement>
                    <keyword> let </keyword>
                    <access::var::2> i </access::var::2>
                    <symbol> = </symbol>
                    <expression>
                        <term>
                            <integerConstant> 0 </integerConstant>
                        </term>
                    </expression>
                    <symbol> ; </symbol>
                </letStatement>
                <whileStatement>
                    <keyword> while </keyword>
                    <symbol> ( </symbol>
                    <expression>
                        <term>
                            <access::var2> i </access::var2>
                        </term>
                        <symbol> &lt; </symbol>
                        <term>
                            <access::var1> length </access::var1>
                        </term>
                    </expression>
                    <symbol> ) </symbol>
                    <symbol> { </symbol>
                    <statements>
                        <letStatement>
                            <keyword> let </keyword>
                            <access::var::0> a </access::var::0>
                            <symbol> [ </symbol>
                            <expression>
                                <term>
                                    <access::var2> i </access::var2>
                                </term>
                            </expression>
                            <symbol> ] </symbol>
                            <symbol> = </symbol>
                            <expression>
                                <term>
                                    <identifier> Keyboard </identifier>
                                    <symbol> . </symbol>
                                    <identifier> readInt </identifier>
                                    <symbol> ( </symbol>
                                    <expressionList>
                                        <expression>
                                            <term>
                                                <stringConstant> ENTER THE NEXT NUMBER:  </stringConstant>
                                            </term>
                                        </expression>
                                    </expressionList>
                                    <symbol> ) </symbol>
                                </term>
                            </expression>
                            <symbol> ; </symbol>
                        </letStatement>
                        <letStatement>
                            <keyword> let </keyword>
                            <access::var::2> i </access::var::2>
                            <symbol> = </symbol>
                            <expression>
                                <term>
                                    <access::var2> i </access::var2>
                                </term>
                                <symbol> + </symbol>
                                <term>
                                    <integerConstant> 1 </integerConstant>
                                </term>
                            </expression>
                            <symbol> ; </symbol>
                        </letStatement>
                    </statements>
                    <symbol> } </symbol>
                </whileStatement>
                <letStatement>
                    <keyword> let </keyword>
                    <access::var::2> i </access::var::2>
                    <symbol> = </symbol>
                    <expression>
                        <term>
                            <integerConstant> 0 </integerConstant>
                        </term>
                    </expression>
                    <symbol> ; </symbol>
                </letStatement>
                <letStatement>
                    <keyword> let </keyword>
                    <access::var::3> sum </access::var::3>
                    <symbol> = </symbol>
                    <expression>
                        <term>
                            <integerConstant> 0 </integerConstant>
                        </term>
                    </expression>
                    <symbol> ; </symbol>
                </letStatement>
                <whileStatement>
                    <keyword> while </keyword>
                    <symbol> ( </symbol>
                    <expression>
                        <term>
                            <access::var2> i </access::var2>
                        </term>
                        <symbol> &lt; </symbol>
                        <term>
                            <access::var1> length </access::var1>
                        </term>
                    </expression>
                    <symbol> ) </symbol>
                    <symbol> { </symbol>
                    <statements>
                        <letStatement>
                            <keyword> let </keyword>
                            <access::var::3> sum </access::var::3>
                            <symbol> = </symbol>
                            <expression>
                                <term>
                                    <access::var3> sum </access::var3>
                                </term>
                                <symbol> + </symbol>
                                <term>
                                    <access::var0> a </access::var0>
                                    <symbol> [ </symbol>
                                    <expression>
                                        <term>
                                            <access::var2> i </access::var2>
                                        </term>
                                    </expression>
                                    <symbol> ] </symbol>
                                </term>
                            </expression>
                            <symbol> ; </symbol>
                        </letStatement>
                        <letStatement>
                            <keyword> let </keyword>
                            <access::var::2> i </access::var::2>
                            <symbol> = </symbol>
                            <expression>
                                <term>
                                    <access::var2> i </access::var2>
                                </term>
                                <symbol> + </symbol>
                                <term>
                                    <integerConstant> 1 </integerConstant>
                                </term>
                            </expression>
                            <symbol> ; </symbol>
                        </letStatement>
                    </statements>
                    <symbol> } </symbol>
                </whileStatement>
                <doStatement>
                    <keyword> do </keyword>
                    <identifier> Output </identifier>
                    <symbol> . </symbol>
                    <identifier> printString </identifier>
                    <symbol> ( </symbol>
                    <expressionList>
                        <expression>
                            <term>
                                <stringConstant> THE AVERAGE IS:  </stringConstant>
                            </term>
                        </expression>
                    </expressionList>
                    <symbol> ) </symbol>
                    <symbol> ; </symbol>
                </doStatement>
                <doStatement>
                    <keyword> do </keyword>
                    <identifier> Output </identifier>
                    <symbol> . </symbol>
                    <identifier> printInt </identifier>
                    <symbol> ( </symbol>
                    <expressionList>
                        <expression>
                            <term>
                                <access::var3> sum </access::var3>
                            </term>
                            <symbol> / </symbol>
                            <term>
                                <access::var1> length </access::var1>
                            </term>
                        </expression>
                    </expressionList>
                    <symbol> ) </symbol>
                    <symbol> ; </symbol>
                </doStatement>
                <doStatement>
                    <keyword> do </keyword>
                    <identifier> Output </identifier>
                    <symbol> . </symbol>
                    <identifier> println </identifier>
                    <symbol> ( </symbol>
                    <expressionList></expressionList>
                    <symbol> ) </symbol>
                    <symbol> ; </symbol>
                </doStatement>
                <returnStatement>
                    <keyword> return </keyword>
                    <symbol> ; </symbol>
                </returnStatement>
            </statements>
            <symbol> } </symbol>
        </subroutineBody>
    </subroutineDec>
    <symbol> } </symbol>
</class>