// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/String.jack

/**
 * Represents character strings. In addition for constructing and disposing
 * strings, the class features methods for getting and setting individual
 * characters of the string, for erasing the string's last character,
 * for appending a character to the string's end, and more typical
 * string-oriented operations.
 */
class String {
    field int length, maxLength;
    field Array charArray;
    /** constructs a new empty string with a maximum length of maxLength
     *  and initial length of 0. */
    constructor String new(int maxLen) {
        let length = 0;
        let maxLength = maxLen;
        if(maxLen > 0){
            let charArray = Array.new(maxLength);
        }
        return this;
    }

    /** Disposes this string. */
    method void dispose() {
        do Memory.deAlloc(this);
        return;
    }

    /** Returns the current length of this string. */
    method int length() {
        return length;
    }

    /** Returns the character at the j-th location of this string. */
    method char charAt(int j) {
        if (~validIndex(j)) {
            do invalidIndex(j);
            return;
        }
        return charArray[j];
    }
    
    method void invalidIndex(int given) {
            // do Output.printString("invalid index at ");
            // do Output.printString(func);
            // do Output.println();
            // do Output.printString("max index: ");
            // do Output.printInt(maxLength - 1);
            // do Output.printString(" given index: ");
            do Output.printInt(maxLength);
            do Output.println();
            do Output.printInt(length());
            do Output.println();
            do Output.printInt(given);
            do Output.println();
            do Sys.error(2);
            return;
    }
    /** Sets the character at the j-th location of this string to c. */
    method void setCharAt(int j, char c) {
         if (~validIndex(j)) {
            do invalidIndex(j);
            return;
        }
        if (~String.validChar(c)) {
            do String.invalidChar(c);
            return;
        }
        if (j > (length - 1)) {
            let length = j + 1;
        }
        let charArray[j] = c;
        return;
    }

    function void invalidChar(char c) {
        do Output.printString("Invalid char: ");
        do Output.printInt(c);
        do Sys.error(1);
        return;
    }

    function boolean validChar(char c) {
        return (((c > 31) & (c < 127)) | ((c > 127) & (c < 153)));
    }

    method boolean validIndex(int j) {
        return ((j < maxLength) & (j > -1));
    }
    /** Appends c to this string's end and returns this string. */
    method String appendChar(char c) {
        if (~String.validChar(c)){
            do String.invalidChar(c);
            return;
        }
        if (~validIndex(length)){
            do invalidIndex(length);
            return;
        }
        let charArray[length] = c;
        let length = length + 1;
        return this;
    }

    /** Erases the last character from this string. */
    method void eraseLastChar() {
        if (length = 0){
            return;
        }
        let charArray[length-1] = 0;
        let length = length - 1;
        return;
    }

    function int charToInt(char c) {
        if (c = 48) { return 0; }
        if (c = 49) { return 1; }
        if (c = 50) { return 2; }
        if (c = 51) { return 3; }
        if (c = 52) { return 4; }
        if (c = 53) { return 5; }
        if (c = 54) { return 6; }
        if (c = 55) { return 7; }
        if (c = 56) { return 8; }
        if (c = 57) { return 9; }
        return -1;
    }
    
    function char intToChar(int i) {
        if (i = 0) { return 48; }
        if (i = 1) { return 49; }
        if (i = 2) { return 50; }
        if (i = 3) { return 51; }
        if (i = 4) { return 52; }
        if (i = 5) { return 53; }
        if (i = 6) { return 54; }
        if (i = 7) { return 55; }
        if (i = 8) { return 56; }
        if (i = 9) { return 57; }
        return -1;
    }
    /** Returns the integer value of this string, 
     *  until a non-digit character is detected. */
    method int intValue() {
        /*
        val = 0
        for (i = 0 ... str.length) do
        d = integer value of str[i] 
        val = val * 10 + d
        return val
        */
        var int i, val, d;
        var char currChar;
        var boolean negative;
        let i = 0;
        if (charArray[0] = 45) {
            let negative = true;
            let i = 1;
        }
        while (i < length) {
            let currChar = charArray[i];
            let d = String.charToInt(currChar);
            if (d = (-1)) { 
                if (negative) { return -val; }
                return val; 
            }
            let val = (val * 10) + d;
            let i = i + 1;
        }
        if (negative) { return -val; }
        return val;
    }

    /** Sets this string to hold a representation of the given value. */
    method void setInt(int val) {
         /* 
        int2String:
        lastDigit = val % 10
        c = character representing lastDigit 
        if (val < 10)
            return c (as a string) 
        else
            return int2String(val/10).append(c)
        */
        let length = 0;
        if (val < 0) {
            do appendChar(45);
        } 
        do intToStr(Math.abs(val));
        return;
        
    }
    method void intToStr(int val) {
        var int lastDigit;
        var char digitChar;
        let lastDigit = String.mod(val, 10);
        let digitChar = String.intToChar(lastDigit);
        if (val < 10) {
            do appendChar(digitChar);
            return;
        } else {
            do intToStr(val/10);
            do appendChar(digitChar);
        }

        return; 
    }

    /** Returns the new line character. */
    function char newLine() {
        return 128;
    }

    /** Returns the backspace character. */
    function char backSpace() {
        return 129;
    }

    /** Returns the double quote (") character. */
    function char doubleQuote() {
        return 34;
    }

     /** returns a % b*/
    function int mod(int a, int b) {
        let a = Math.abs(a);
        let b = Math.abs(b);
      //  (a/b)*b + a%b = a
      return a - ((a/b)*b);
    }
}
