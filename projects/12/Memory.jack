// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Memory.jack

/**
 * This library provides two services: direct access to the computer's main
 * memory (RAM), and allocation and recycling of memory blocks. The Hack RAM
 * consists of 32,768 words, each holding a 16-bit binary number.
 */ 
class Memory {
    static Array ram, heap, freeList;
  
    /** Initializes the class. */
    function void init() { 
        /*
        a segment contains 
            seg[0] = address of next segment
            seg[1] size of block
            and seg[2] - seg[size+2] 
        */

        let ram = 0; // sets base address of ram to 0, so ram[i] == RAM[i]
        let heap = 2048;
        let freeList = heap;
        let freeList[0] = 0; // the pointer to the next segment (initially there is only one segment)
        let freeList[1] = 14334;
        return;
    }

    /** Returns the RAM value at the given address. */
    function int peek(int address) {
        return ram[address];
    }

    /** Sets the RAM value at the given address to the given value. */
    function void poke(int address, int value) {
        let ram[address] = value;
        return;
    }

    function int getFreeList() {
        return freeList;
    }
    /** Finds an available RAM block of the given size and returns
     *  a reference to its base address. */
    function int alloc(int size) {
        var int possibleSize, returnAddr, originalSize;
        var Array temp;
        let temp = freeList;
        let possibleSize = size + 2;
        while(true){
            let originalSize = temp[1];
            if (originalSize > (possibleSize - 1)) {
                let freeList[0] = 0;
                let freeList[1] = size;
                let returnAddr = freeList + 2;
                let freeList = freeList + possibleSize;
                let freeList[0] = 0;
                let freeList[1] = originalSize - possibleSize;
                return returnAddr;
            }
            
    }
        do Sys.error(1);
        return -1;
    }

    /** De-allocates the given object (cast as an array) by making
     *  it available for future allocations. */
    function void deAlloc(Array o) {
        return;
    }    
}
